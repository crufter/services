// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/onboarding/onboarding.proto

package go_micro_service_onboarding

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Onboarding service

func NewOnboardingEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Onboarding service

type OnboardingService interface {
	SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...client.CallOption) (*SendVerificationEmailResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
	// Creates a subscription and an account
	FinishOnboarding(ctx context.Context, in *FinishOnboardingRequest, opts ...client.CallOption) (*FinishOnboardingResponse, error)
}

type onboardingService struct {
	c    client.Client
	name string
}

func NewOnboardingService(name string, c client.Client) OnboardingService {
	return &onboardingService{
		c:    c,
		name: name,
	}
}

func (c *onboardingService) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, opts ...client.CallOption) (*SendVerificationEmailResponse, error) {
	req := c.c.NewRequest(c.name, "Onboarding.SendVerificationEmail", in)
	out := new(SendVerificationEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "Onboarding.Verify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingService) FinishOnboarding(ctx context.Context, in *FinishOnboardingRequest, opts ...client.CallOption) (*FinishOnboardingResponse, error) {
	req := c.c.NewRequest(c.name, "Onboarding.FinishOnboarding", in)
	out := new(FinishOnboardingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Onboarding service

type OnboardingHandler interface {
	SendVerificationEmail(context.Context, *SendVerificationEmailRequest, *SendVerificationEmailResponse) error
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
	// Creates a subscription and an account
	FinishOnboarding(context.Context, *FinishOnboardingRequest, *FinishOnboardingResponse) error
}

func RegisterOnboardingHandler(s server.Server, hdlr OnboardingHandler, opts ...server.HandlerOption) error {
	type onboarding interface {
		SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, out *SendVerificationEmailResponse) error
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
		FinishOnboarding(ctx context.Context, in *FinishOnboardingRequest, out *FinishOnboardingResponse) error
	}
	type Onboarding struct {
		onboarding
	}
	h := &onboardingHandler{hdlr}
	return s.Handle(s.NewHandler(&Onboarding{h}, opts...))
}

type onboardingHandler struct {
	OnboardingHandler
}

func (h *onboardingHandler) SendVerificationEmail(ctx context.Context, in *SendVerificationEmailRequest, out *SendVerificationEmailResponse) error {
	return h.OnboardingHandler.SendVerificationEmail(ctx, in, out)
}

func (h *onboardingHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.OnboardingHandler.Verify(ctx, in, out)
}

func (h *onboardingHandler) FinishOnboarding(ctx context.Context, in *FinishOnboardingRequest, out *FinishOnboardingResponse) error {
	return h.OnboardingHandler.FinishOnboarding(ctx, in, out)
}
